name: Cross-Platform Release

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          # - target: i686-unknown-linux-gnu
          #   os: ubuntu-latest
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
          - target: i686-pc-windows-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential

      - name: Install build dependencies (Windows)
        if: contains(matrix.target, 'windows')
        run: sudo apt-get update && sudo apt-get install -y gcc-mingw-w64

      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Set up Rust
        uses: moonrepo/setup-rust@v1.2.2
        with:
          rust-version: stable
          target: ${{ matrix.target }}

      - name: Install build tools (if needed)
        run: |
          rustup target add "${{ matrix.target }}"
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            sudo apt-get update && sudo apt-get install -y mingw-w64
          fi

      - name: Build
        run: cargo build --release --target=${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/rshttp

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          path: dist/

      - name: Get version
        id: version
        run: |
          ver=$(grep '^version' Cargo.toml | head -n1 | cut -d '"' -f2)
          echo "version=$ver" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}